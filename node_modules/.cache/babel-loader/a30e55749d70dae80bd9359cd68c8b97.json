{"ast":null,"code":"var _jsxFileName = \"/home/dani/\\xC1rea de Trabalho/ChatBot-react/src/componets/Bot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport api from '../services/api';\nimport { Formik } from 'formik';\nimport { FaPaperPlane } from 'react-icons/fa';\nimport \"../styles/bot.css\";\nimport Messages from \"./Messages\";\nimport * as Yup from 'yup';\nimport RatingStar from './RatingStar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst balloon = {\n  first: \"Olá, eu sou Chatnilson, tudo bem? Para começarmos, preciso saber seu nome.\",\n  second: \"Legal, agora que sabemos sua cidade e estado. Quando foi que você nasceu?\",\n  third: {\n    1: \"Agora me fala teu e-mail, por gentileza.\",\n    2: \"Digite um email válido\"\n  },\n  fourth: \"Você finalizou o teste. Faça uma avaliação sobre o processo que realizou até chegar aqui. Nós agradecemos!\"\n};\n\nconst Bot = () => {\n  _s();\n\n  const [responses, setResponses] = useState([{\n    text: balloon.first,\n    isBot: true\n  }]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [timeMessage, setTimeMessage] = useState(0);\n  const [input, setInput] = useState(\"\");\n\n  async function fetcData(ev) {\n    input = ev.target;\n    await api.post('/users', input) //.then( (res)=>res.json()) \n    .then(data => console.log(data)).catch(error => console.error(\"There was an error!\", error));\n  }\n\n  ;\n  const SignupSchema = Yup.object().shape({\n    name: Yup.string().min(2, 'Nome muito curto!').max(50, 'Nome muito longo!').required('Campo obrigatório'),\n    city: Yup.string().min(2, 'Nome muito curto!').max(50, 'Nome muito longo!').required('Campo obrigatório'),\n    date: Yup.date().required('Required'),\n    email: Yup.string().email('Email inválido').required('Required')\n  });\n\n  const handleMessageSubmit = message => {\n    const messageChoice = {\n      0: {\n        text: `Que satisfação ${message}. Agora que sei seu nome, qual a cidade e estado que você mora?`,\n        isBot: true\n      },\n      1: {\n        text: balloon.second,\n        isBot: true\n      },\n      2: {\n        text: balloon.third[1],\n        isBot: true\n      },\n      3: {\n        text: balloon.fourth,\n        isBot: true\n      },\n      4: {\n        text: balloon.reload,\n        isBot: true\n      }\n    };\n    setResponses(responses => [...responses, messageChoice[timeMessage] || []]);\n\n    if (messageChoice[timeMessage].text === balloon.second) {\n      setInput(\"date\");\n    } else if (messageChoice[timeMessage].text === balloon.third[1]) {\n      setInput(\"email\");\n    } else {\n      setInput(\"text\");\n    }\n\n    if (timeMessage !== 4) {\n      setTimeMessage(timeMessage => timeMessage + 1);\n    } else {\n      setTimeMessage(4);\n    }\n  };\n\n  const handleMessageChange = event => {\n    console.log(setCurrentMessage(event.target.value));\n  };\n\n  const handleSubmit = event => {\n    {\n      fetcData;\n    }\n    const message = {\n      text: currentMessage,\n      isBot: false\n    };\n\n    if (event.key === \"Enter\" || event.type === \"click\") {\n      setResponses(responses => [...responses, message]);\n      handleMessageSubmit(message.text);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbotContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messagesContainer\",\n        children: /*#__PURE__*/_jsxDEV(Messages, {\n          messages: responses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RatingStar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          name: '',\n          city: '',\n          date: '',\n          email: ''\n        },\n        validationSchema: SignupSchema,\n        onSubmit: (values, actions) => {\n          alert(JSON.stringify(values, null, 2));\n          actions.resetForm();\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputBot\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            name: input,\n            type: input,\n            onChange: ev => {\n              handleMessageChange(ev, fetcData);\n            },\n            value: currentMessage.values,\n            onKeyDown: handleSubmit,\n            className: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmit,\n            className: \"button\",\n            children: /*#__PURE__*/_jsxDEV(FaPaperPlane, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bot, \"pcG6iR5WGR7HUZRA0TYVHVGM0V8=\");\n\n_c = Bot;\nexport default Bot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bot\");","map":{"version":3,"sources":["/home/dani/Área de Trabalho/ChatBot-react/src/componets/Bot.js"],"names":["React","useState","api","Formik","FaPaperPlane","Messages","Yup","RatingStar","balloon","first","second","third","fourth","Bot","responses","setResponses","text","isBot","currentMessage","setCurrentMessage","timeMessage","setTimeMessage","input","setInput","fetcData","ev","target","post","then","data","console","log","catch","error","SignupSchema","object","shape","name","string","min","max","required","city","date","email","handleMessageSubmit","message","messageChoice","reload","handleMessageChange","event","value","handleSubmit","key","type","values","actions","alert","JSON","stringify","resetForm"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport api from '../services/api';\r\nimport { Formik} from 'formik';\r\nimport { FaPaperPlane } from 'react-icons/fa';\r\n\r\nimport \"../styles/bot.css\";\r\nimport Messages from \"./Messages\";\r\nimport * as Yup from 'yup';\r\nimport RatingStar from './RatingStar';\r\n\r\n\r\n\r\nconst balloon = {\r\n  first:\r\n    \"Olá, eu sou Chatnilson, tudo bem? Para começarmos, preciso saber seu nome.\",\r\n  second:\r\n    \"Legal, agora que sabemos sua cidade e estado. Quando foi que você nasceu?\",\r\n  third: {\r\n    1: \"Agora me fala teu e-mail, por gentileza.\",\r\n    2: \"Digite um email válido\",\r\n  },\r\n  fourth:\r\n    \"Você finalizou o teste. Faça uma avaliação sobre o processo que realizou até chegar aqui. Nós agradecemos!\",\r\n\r\n};\r\n\r\n\r\n\r\nconst Bot = () => {\r\n  const [responses, setResponses] = useState([\r\n    { text: balloon.first, isBot: true },\r\n  ]);\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [timeMessage, setTimeMessage] = useState(0);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  async function fetcData(ev) {\r\n\r\n    input = ev.target;\r\n    await api.post('/users', input)\r\n      //.then( (res)=>res.json()) \r\n      .then((data) => console.log(data))\r\n      .catch(error => console.error(\"There was an error!\", error));\r\n\r\n  };\r\n\r\n  const SignupSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(2, 'Nome muito curto!')\r\n      .max(50, 'Nome muito longo!')\r\n      .required('Campo obrigatório'),\r\n    city: Yup.string()\r\n      .min(2, 'Nome muito curto!')\r\n      .max(50, 'Nome muito longo!')\r\n      .required('Campo obrigatório'),\r\n    date: Yup.date().required('Required'),\r\n    email: Yup.string().email('Email inválido').required('Required'),\r\n\r\n  });\r\n\r\n  const handleMessageSubmit = (message) => {\r\n    const messageChoice = {\r\n      0: {\r\n        text: `Que satisfação ${message}. Agora que sei seu nome, qual a cidade e estado que você mora?`,\r\n        isBot: true,\r\n      },\r\n\r\n      1: {\r\n        text: balloon.second,\r\n        isBot: true,\r\n      },\r\n      2: {\r\n        text: balloon.third[1],\r\n        isBot: true,\r\n      },\r\n      3: {\r\n        text: balloon.fourth,\r\n        isBot: true,\r\n      },\r\n      4: {\r\n        text: balloon.reload,\r\n        isBot: true,\r\n      },\r\n    };\r\n\r\n    setResponses((responses) => [\r\n      ...responses,\r\n      messageChoice[timeMessage] || [],\r\n    ]);\r\n\r\n\r\n    if (messageChoice[timeMessage].text === balloon.second) {\r\n      setInput(\"date\");\r\n    } else if (messageChoice[timeMessage].text === balloon.third[1]) {\r\n      setInput(\"email\");\r\n    } else {\r\n      setInput(\"text\");\r\n    }\r\n    if (timeMessage !== 4) {\r\n      setTimeMessage((timeMessage) => timeMessage + 1);\r\n    } else {\r\n      setTimeMessage(4);\r\n    }\r\n  };\r\n\r\n  const handleMessageChange = (event) => {\r\n    console.log(setCurrentMessage(event.target.value))\r\n\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    { fetcData }\r\n    const message = {\r\n      text: currentMessage,\r\n      isBot: false,\r\n    };\r\n    if (event.key === \"Enter\" || event.type === \"click\") {\r\n      setResponses((responses) => [...responses, message]);\r\n      handleMessageSubmit(message.text);\r\n      setCurrentMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n\r\n    <div className=\"chatbot\">\r\n      <div className=\"chatbotContainer\">\r\n        <div className=\"messagesContainer\">\r\n          <Messages messages={responses} />\r\n        </div>\r\n        <RatingStar />\r\n        < Formik\r\n          initialValues={{\r\n            name: '',\r\n            city: '',\r\n            date: '',\r\n            email: ''\r\n          }}\r\n          validationSchema={SignupSchema}\r\n          onSubmit={(values, actions) => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            actions.resetForm();\r\n\r\n          }}\r\n        >\r\n\r\n          <div className=\"inputBot\">\r\n            <input\r\n              name={input}\r\n              type={input}\r\n              onChange={(ev) => {handleMessageChange(ev, fetcData)}}\r\n              value={currentMessage.values}\r\n              onKeyDown={handleSubmit}\r\n              className=\"input\"\r\n\r\n            />\r\n\r\n            <button\r\n              onClick={handleSubmit}\r\n              className=\"button\">\r\n              <FaPaperPlane />\r\n            </button>\r\n\r\n\r\n          </div>\r\n        </ Formik >\r\n      </div>\r\n    </div>\r\n\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default Bot;\r\n"]},"metadata":{},"sourceType":"module"}